name: UI Visual Verification

on:
  pull_request:
    paths:
      - "src/components/**"
      - "src/app/**"
      - "src/styles/**"
      - "public/**"

jobs:
  visual-regression:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Build app
        run: npm run build

      - name: Start dev server
        run: |
          npm run dev &
          sleep 5

      - name: Wait for server
        run: npx wait-on http://localhost:3000 --timeout 60000

      - name: Create screenshots directory
        run: mkdir -p screenshots/diffs

      - name: Take screenshots
        run: |
          npx playwright screenshot http://localhost:3000 screenshots/current.png --viewport-size=375,812 || true

      - name: Compare with reference
        if: hashFiles('screenshots/reference.png') != ''
        run: |
          if [ -f "screenshots/reference.png" ]; then
            node -e "
            const Jimp = require('jimp');
            const pixelmatch = require('pixelmatch');
            (async () => {
              const design = await Jimp.read('screenshots/reference.png');
              const current = await Jimp.read('screenshots/current.png');
              const width = Math.max(design.bitmap.width, current.bitmap.width);
              const height = Math.max(design.bitmap.height, current.bitmap.height);
              design.resize(width, height);
              current.resize(width, height);
              const diff = await Jimp.create(width, height);
              const numDiffPixels = pixelmatch(
                design.bitmap.data,
                current.bitmap.data,
                diff.bitmap.data,
                width,
                height,
                { threshold: 0.1 }
              );
              const similarity = ((width * height - numDiffPixels) / (width * height) * 100).toFixed(2);
              await diff.writeAsync('screenshots/diffs/diff.png');
              console.log(JSON.stringify({ similarity: parseFloat(similarity), diffPixels: numDiffPixels }));
            })();
            " > test-results.json || echo '{"similarity": 0}' > test-results.json
          else
            echo '{"similarity": 0, "error": "Reference image not found"}' > test-results.json
          fi

      - name: Upload diff images
        if: failure() || always()
        uses: actions/upload-artifact@v4
        with:
          name: visual-diffs
          path: screenshots/diffs/
          if-no-files-found: ignore

      - name: Comment PR with results
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            try {
              const results = JSON.parse(fs.readFileSync('./test-results.json', 'utf8'));
              
              let comment = '## 🎨 Visual Regression Results\n\n';
              
              if (results.error) {
                comment += `⚠️ ${results.error}\n`;
              } else {
                const emoji = results.similarity >= 99 ? '✅' : results.similarity >= 95 ? '⚠️' : '❌';
                comment += `${emoji} **Similarity**: ${results.similarity}%\n`;
                comment += `🔍 Different pixels: ${results.diffPixels || 0}\n\n`;
                
                if (results.similarity < 99) {
                  comment += '⚠️ UI needs adjustment. Check artifacts for diff images.\n';
                } else {
                  comment += '✅ UI matches design!\n';
                }
              }
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.error('Error creating comment:', error);
            }

